# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14_KUL2BS61-rm4Pksxq9tdqXVn18YvYF
"""

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 1.x

from google.colab import files
src = list(files.upload().values())[0]
open('SpectralNormalizationKeras.py','wb').write(src)
import SpectralNormalizationKeras

import tensorflow as tf
from keras.layers import Input, Dense, Conv2D, Add, Dot, Conv2DTranspose, Activation, Reshape,BatchNormalization,UpSampling2D,AveragePooling2D, GlobalAveragePooling2D, LeakyReLU, Reshape, Flatten
from keras.models import Model, Sequential
import keras.backend as K
from keras.utils import plot_model
from SpectralNormalizationKeras import DenseSN, ConvSN2D
from keras.layers.pooling import _GlobalPooling2D
from tensorflow.keras.layers import *
from tensorflow.keras.models import *

from keras.layers import Input, Dense, Conv2D, Add, Dot, Conv2DTranspose, Activation, Reshape,BatchNormalization,UpSampling2D,AveragePooling2D, GlobalAveragePooling2D, LeakyReLU, Reshape, Flatten
from keras.models import Model, Sequential
import keras.backend as K
from keras.utils import plot_model
from SpectralNormalizationKeras import DenseSN, ConvSN2D
from keras.layers.pooling import _GlobalPooling2D

class GlobalSumPooling2D(_GlobalPooling2D):

    def call(self, inputs):
        if self.data_format == 'channels_last':
            return K.sum(inputs, axis=[1, 2])
        else:
            return K.sum(inputs, axis=[2, 3])


def ResBlock(input_shape, sampling=None, trainable_sortcut=True, 
             spectral_normalization=False, 
             bn_momentum=0.9, bn_epsilon=0.00002,
             channels=256, k_size=3, summary=False,
             plot=False, name=None):
    #BatchNormalization
    res_block_input = Input(shape=input_shape)
    
    res_block_1 = BatchNormalization(momentum=bn_momentum, epsilon=bn_epsilon)(res_block_input)
        
    res_block_1     = Activation('relu')(res_block_1)
    
    if spectral_normalization:
        res_block_1     = ConvSN2D(channels, k_size , strides=1, padding='same',kernel_initializer='glorot_uniform')(res_block_1)
    else:
        res_block_1     = Conv2D(channels, k_size , strides=1, padding='same',kernel_initializer='glorot_uniform')(res_block_1)
    
    if sampling=='up':
        res_block_1     = UpSampling2D()(res_block_1)
    else:
        pass
    
    res_block_2     = BatchNormalization(momentum=bn_momentum, epsilon=bn_epsilon)(res_block_1)

    res_block_2     = Activation('relu')(res_block_2)
    
    if spectral_normalization:
        res_block_2     = ConvSN2D(channels, k_size , strides=1, padding='same',kernel_initializer='glorot_uniform')(res_block_2)
    else:
        res_block_2     = Conv2D(channels, k_size , strides=1, padding='same',kernel_initializer='glorot_uniform')(res_block_2)
    
    if sampling=='down':
        res_block_2 = AveragePooling2D()(res_block_2)
    else:
        pass
    
    if trainable_sortcut:
        short_cut = Conv2D(channels, 1 , strides=1, padding='same',kernel_initializer='glorot_uniform')(res_block_input)
    else:
        short_cut = res_block_input
        
    if sampling=='up':
        short_cut       = UpSampling2D()(short_cut)
    elif sampling=='down':
        short_cut       = AveragePooling2D()(short_cut)
    elif sampling=='None':
        pass

    res_block_add   = Add()([short_cut, res_block_2])
    
    res_block = Model(res_block_input, res_block_add, name=name)
    
    if plot:
        plot_model(res_block, name+'.png', show_layer_names=False)
    if summary:
        print(name)
        res_block.summary()
    
    return res_block
    
def BuildGenerator(summary=True, bn_momentum=0.9, bn_epsilon=0.00002, name='Generator', plot=False):

    model_input = Input(shape=(228,))
    h           = Dense(4*4*256, kernel_initializer='glorot_uniform')(model_input)
    h           = Reshape((4,4,256))(h)
    resblock_1  = ResBlock(input_shape=(4,4,256), sampling='up', bn_epsilon=bn_epsilon, bn_momentum=bn_momentum, name='Generator_resblock_1')
    h           = resblock_1(h)
    resblock_2  = ResBlock(input_shape=(8,8,256), sampling='up', bn_epsilon=bn_epsilon, bn_momentum=bn_momentum, name='Generator_resblock_2')
    h           = resblock_2(h)
    resblock_3  = ResBlock(input_shape=(16,16,256), sampling='up', bn_epsilon=bn_epsilon, bn_momentum=bn_momentum, name='Generator_resblock_3')
    h           = resblock_3(h)
    resblock_3  = ResBlock(input_shape=(32,32,256), sampling='up', bn_epsilon=bn_epsilon, bn_momentum=bn_momentum, name='Generator_resblock_4')
    h           = resblock_3(h)
    h           = BatchNormalization(epsilon=bn_epsilon, momentum=bn_momentum)(h)
    h           = Activation('relu')(h)
    model_output= Conv2D(3,   kernel_size=3, strides=1, padding='same', activation='tanh')(h)
    model = Model(model_input, model_output,name=name)
        

    if summary:
        print("Generator")
        model.summary()
    return model

def BuildDiscriminator(summary=True, bn_momentum=0.9, bn_epsilon=0.00002, name='Discriminator', plot=False):
    
    model_input = Input(shape=(64,64,3))
    resblock_1  = ResBlock(input_shape=(64,64,3), channels=128, sampling='down', spectral_normalization=True, name='Discriminator_resblock_Down_1')
    h           = resblock_1(model_input)
    resblock_2  = ResBlock(input_shape=(32,32,128), channels=128, sampling='down', spectral_normalization=True, name='Discriminator_resblock_Down_2')
    h           = resblock_2(h)
    resblock_3  = ResBlock(input_shape=(16,16,128),channels=128, sampling='down', spectral_normalization=True, name='Discriminator_resblock_Down_3')
    h           = resblock_3(h)
    resblock_4  = ResBlock(input_shape=(8,8,128),channels=128 , sampling=None, spectral_normalization=True, trainable_sortcut=False, name='Discriminator_resblock_1' )
    h           = resblock_4(h)
    resblock_5  = ResBlock(input_shape=(8,8,128),channels=128 , sampling=None, spectral_normalization=True, trainable_sortcut=False, name='Discriminator_resblock_2' )
    h           = resblock_5(h)
    h           = Activation('relu')(h)
    h           = GlobalSumPooling2D()(h)
    model_output= DenseSN(1,kernel_initializer='glorot_uniform')(h)

    model = Model(model_input, model_output, name=name)

        
    if summary:
        print('Discriminator')
        model.summary()
    return model

if __name__ == '__main__':
    print('Plot the model visualization')
    from keras.utils import plot_model
  
    model = BuildGenerator(plot=True)

    model = BuildDiscriminator()

