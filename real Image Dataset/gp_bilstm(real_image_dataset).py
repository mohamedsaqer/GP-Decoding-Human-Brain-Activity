# -*- coding: utf-8 -*-
"""GP-BILSTM(real image dataset).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13vcR5p2J_HqHgjfdWLBYmdvBDHtSm_ID
"""

# start
!pip install hdf5storage
from google.colab import drive
drive.mount('/content/drive')
import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'
import h5py
import numpy as np
import hdf5storage
filepath = '/content/drive/My Drive/GP-Decoding-Human-Brain-Activity/Dataset/random.hdf5'
f1 = h5py.File(filepath, 'r')
X1 = f1['default']
data= np.array(X1.value)
x_train = data[:3000,:,:]
testing = data[3000:,:,:]
print (x_train.shape)
print (testing.shape)

from os import listdir
import scipy.io
import math
from sklearn import preprocessing
import numpy as np
def find_filenames(path_to_dir):
    filenames = listdir(path_to_dir)
    return [filename for filename in filenames]

y_train = []
fileNames11 = find_filenames("/content/drive/My Drive/GP-Decoding-Human-Brain-Activity/Dataset/data/data_summary")
print(type(fileNames11))
label = np.empty(4608,dtype=object)
print(label)
f=0
for summary in fileNames11:
    mat = scipy.io.loadmat('/content/drive/My Drive/GP-Decoding-Human-Brain-Activity/Dataset/data/data_summary/'+ summary)
    temp = mat['experiment_table']
    for i in range(192):
         label[f*192+i] = temp[i][8]
        #  y_train.append(temp[i][8])
         if int(temp[i][4][0]) > 96:
           y_train.append(math.ceil((int(temp[i][4][0]) - 96)/3))
         elif int(temp[i][4][0]) == 1 or int(temp[i][4][0]) == 2:
           y_train.append(1)
         else:
           y_train.append(math.ceil((int(temp[i][4][0]))/3))
    f=f+1
print(label[2000])
print(label)
# y_train = np.concatenate(y_train,axis=0)
print(y_train)

print(y_train)
print(len(y_train))
testing_data = np.array(y_train)
print(testing_data)
print(testing_data.shape)
y_training = testing_data[:3000]
y_testing = testing_data[3000:]
print(y_training)
print(y_testing)
print(y_training.shape)
print(y_testing.shape)
# normalized_x_train = preprocessing.normalize([x_train])
normalized_y_train = preprocessing.normalize([y_training])
# normalized_x_test = preprocessing.normalize([testing])
normalized_y_test = preprocessing.normalize([y_testing])
# print(normalized_x_train)
print(normalized_y_train)
# print(normalized_x_train.shape)
print(normalized_y_train.shape)
# normalized_x_train = np.concatenate(normalized_x_train, axis=0)
normalized_y_train = np.concatenate(normalized_y_train, axis=0)
# normalized_x_test = np.concatenate(normalized_x_test, axis=0)
normalized_y_test = np.concatenate(normalized_y_test, axis=0)
print(normalized_y_train)
print(normalized_y_train.shape)

import math
import pandas as pd
from random import random
from keras.models import Sequential
from keras.layers import LSTM
from keras.layers import Dense
from keras.layers import TimeDistributed
from keras.layers import Bidirectional
from sklearn.preprocessing import MinMaxScaler
import matplotlib.pyplot as plt


# # define LSTM
# model = Sequential()
# model.add(Bidirectional(LSTM(16, return_sequences=True), input_shape=(x_train.shape[1], x_train.shape[2])))
# model.add(TimeDistributed(Dense(y_train.shape[1], activation='softmax')))
# model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

# # Time series define LSTM
# model = Sequential()
# model.add(LSTM(200, activation='relu', input_shape=(x_train.shape[1], x_train.shape[2])))
# model.add(Dense(100, activation='relu'))
# model.add(Dense(y_train.shape[0]))
# model.compile(loss='mse', optimizer='adam')

#double layers
model = Sequential()
model.add(Bidirectional(LSTM(128, return_sequences=True), input_shape=(128, 1230)))
model.add(Bidirectional(LSTM(128)))
model.add(Dense(64, activation='relu'))
model.add(Dense(32, activation='softmax'))
model.compile(loss='mse', optimizer='adam', metrics=['accuracy'])

# # With custom backward layer
# model = Sequential()
# forward_layer = LSTM(64, return_sequences=True)
# backward_layer = LSTM(64, activation='softmax', return_sequences=True, go_backwards=True)
# model.add(Bidirectional(forward_layer, backward_layer=backward_layer, input_shape=(128, 1230)))
# model.add(Dense(32, activation='softmax'))
# model.compile(loss='mse', optimizer='adam', metrics=['accuracy'])

model.summary()
model.fit(x_train, normalized_y_train, validation_data=(testing, normalized_y_test), epochs=2, batch_size=128, verbose=1)

print("Evaluate on test data")
results = model.evaluate(testing, y_testing, batch_size=128, verbose=1)
print("test loss, test acc:", results)
print("Generate predictions for 9 samples")
predictions = model.predict(testing[:3])
print("predictions shape:", predictions.shape)
print("predictions:", predictions)